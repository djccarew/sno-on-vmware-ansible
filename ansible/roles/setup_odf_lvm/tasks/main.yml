---
- name: Look for kubeconfig file
  stat:
    path: auth/{{ sno_cluster_name }}-kubeconfig
  register: kubeconfig_file

- name: Verify that kubeconfig file exists
  assert:
    that:  kubeconfig_file.stat.exists
    fail_msg: "kubeconfig  file auth/{{ sno_cluster_name }}-kubeconfig is required for this playbook"
    success_msg: "Required kubeconfig file exists"

- name: Look for kubeadmin.json file
  stat:
    path: auth/{{ sno_cluster_name }}-kubeadmin.json
  register: kubeadmin_file

- name: Verify that kubeadmin.json file exists
  assert:
    that:  kubeadmin_file.stat.exists
    fail_msg: "kubeadmin file auth/{{ sno_cluster_name }}-kubeadmin.json is required for this playbook"
    success_msg: "Required kubeadmin.json file exists"

- name: Get kubeadmin credentials
  set_fact:
    kubeadmin_creds: "{{ lookup('file','auth/' + sno_cluster_name + '-kubeadmin.json') | from_json }}"
    cluster_api_url: "https://api.{{ sno_cluster_name }}.{{ sno_domain_name }}:6443"

- name: Log in (obtain access token)
  community.okd.openshift_auth:
    username: "{{ kubeadmin_creds.username }}"
    password: "{{ kubeadmin_creds.password }}"
    validate_certs: no
    host: "{{ cluster_api_url }}"
  register: openshift_auth_results

- name: Save token
  set_fact:
    user_token_var: "{{ openshift_auth_results.openshift_auth.api_key }}"

- name: Setup for disconnected install
  block:
    - name: Get manifest dir
      find: 
        file_type: directory
        paths: "mirrored-images/{{ sno_release }}/olm"
        patterns: "manifests-local-index-*"
        recurse: no
      register: manifest_dirs

    - name: Save as var
      set_fact:
        manifest_dir: "{{ manifest_dirs.files[0].path }}"

    - name: Gen Catalog source
      template:
        src: odflvm-catalog-source.yml.j2
        dest: "k8s/{{ sno_version }}/odmlvm-catalog-source.yml"

    - name: Add Catalog source
      community.okd.k8s:
        state: present
        src: "k8s/{{ sno_version }}/odmlvm-catalog-source.yml"
        validate_certs: no
        kubeconfig: "auth/{{ sno_cluster_name }}-kubeconfig"

    - name: Add image content source policy
      community.okd.k8s:
        state: present
        src: "{{ manifest_dir }}/imageContentSourcePolicy.yaml"
        validate_certs: no
        kubeconfig: "auth/{{ sno_cluster_name }}-kubeconfig"

    - name: Wait up to  3 mins for Catalog Source to be ready
      uri: 
        url: "{{ cluster_api_url }}/apis/operators.coreos.com/v1alpha1/namespaces/openshift-marketplace/catalogsources/local-index-olm-mirror-redhat-operator-index"
        method: GET
        return_content: yes
        status_code: [200,404]
        body_format: json
        validate_certs: no
        headers:
          Authorization: "Bearer {{ user_token_var }}"
      register: airgapped_cs
      until: airgapped_cs.status is defined and airgapped_cs.status == 200 and airgapped_cs.json.status.connectionState.lastObservedState == "READY"
      delay: 10
      retries: 18


    - name: debug
      debug:
        var: airgapped_cs.json

  when:  sno_install_is_airgapped 

- name: "Install ODF LVM Operator"
  community.okd.k8s:
    state: present
    src: "{{ item }}"
    validate_certs: no
    kubeconfig: "auth/{{ sno_cluster_name }}-kubeconfig"
  with_items:
    - "k8s/{{ sno_version }}/odflvm-namespace.yml"
    - "k8s/{{ sno_version }}/odflvm-operatorgroup.yml"
    - "k8s/{{ sno_version }}/odflvm-subscription.yml"

- name: Wait up to  3 mins for Subscription to be ready
  kubernetes.core.k8s_info:
    api_version: operators.coreos.com/v1alpha1
    kind: Subscription
    name: odf-lvm-operator
    namespace: openshift-storageclass
  register: odf_lvm_subscription
  until: odf_lvm_subscription.status == 200 
  delay: 10
  retries: 18

# - name: Wait up to  3 mins for Subscription to be ready
#   uri: 
#     url: "{{ cluster_api_url }}/apis/operators.coreos.com/v1alpha1/namespaces/openshift-storage/subscriptions/odf-lvm-operator"
#     method: GET
#     return_content: yes
#     status_code: [200,404]
#     body_format: json
#     validate_certs: no
#     headers:
#       Authorization: "Bearer {{ user_token_var }}"
#   register: odf_lvm_subscription
#   until: odf_lvm_subscription.status == 200 
#   delay: 10
#   retries: 18

- name: Wait up to  3 mins for LVM Operator CSV to be avail
  uri: 
    url: "{{ cluster_api_url }}/apis/operators.coreos.com/v1alpha1/namespaces/openshift-storage/clusterserviceversions/{{ odf_lvm_subscription.json.status.currentCSV }}"
    method: GET
    return_content: yes
    status_code: [200,404]
    body_format: json
    validate_certs: no
    headers:
      Authorization: "Bearer {{ user_token_var }}"
  register: odf_lvm_csv
  until: odf_lvm_subscription.status == 200 and odf_lvm_csv.json.status is defined and odf_lvm_csv.json.status.phase == "Succeeded"
  delay: 10
  retries: 18

- name: "Create  LVMCluster instance"
  community.okd.k8s:
    state: present
    src: "k8s/{{ sno_version }}/odflvm-lvmcluster.yml"
    validate_certs: no
    kubeconfig: "auth/{{ sno_cluster_name }}-kubeconfig"

- name: Wait up to  5 mins for for LVM Cluster to be avail
  uri: 
    url: "{{ cluster_api_url }}/apis/lvm.topolvm.io/v1alpha1/namespaces/openshift-storage/lvmclusters/lvmcluster-sno"
    method: GET
    return_content: yes
    status_code: [200,404]
    body_format: json
    validate_certs: no
    headers:
      Authorization: "Bearer {{ user_token_var }}"
  register: odf_lvm_cluster
  until: odf_lvm_cluster.status == 200 and odf_lvm_cluster.json.status.deviceClassStatuses is defined and odf_lvm_cluster.json.status.deviceClassStatuses[0].nodeStatus[0].status == "Ready"
  delay: 10
  retries: 30


- name: Make ODF LVM storage class the default
  shell: |
    oc patch storageclass odf-lvm-vg1 -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
  environment:
    KUBECONFIG: "auth/{{ sno_cluster_name }}-kubeconfig"

 
- name: Ending message
  debug:
    msg: "ODF LVM successfully installed and configured"
