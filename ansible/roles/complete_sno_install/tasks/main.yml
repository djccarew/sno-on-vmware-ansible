---
- name: Poll for cluster install completion for 90 minutes
  shell: |
    scripts/poll-for-install-completion.sh  {{ sno_cluster_name }}
  register: poll_for_install_completion
  async: 5400
  poll: 0

- name: Wait for polling script to complete
  async_status:
     jid: "{{ poll_for_install_completion.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 270
  delay: 20

- name: Shell script output for debugging
  debug:
    var: poll_for_install_completion

- name: Shell script output for debugging
  debug:
    var: job_result

- name: Check result of polling script
  assert:
    that: "'Error' not in job_result.stdout"
    fail_msg: "Error: Polling script failed!"
    success_msg: "Install completed successfully!"

- name: Get installer status
  uri:
    url: "{{ assisted_service_api }}/api/assisted-install/v2/clusters?with_hosts=true"
    method: GET
    headers:
    #   Authorization: "{{ 'Bearer ' + refresh_token }}"
      accept: "application/json"
    return_content: yes
  register: install_status_response

- name: Save installer status
  set_fact:
    installer_status: "{{ install_status_response.json | selectattr('name','eq',sno_cluster_name) | first }}"

- name: Save SNO ip address
  set_fact:
    sno_ip: "{{ sno_ip_address }}"

- name: Get kubeconfig file
  get_url:
    url: "{{ assisted_service_api }}/api/assisted-install/v2/clusters/{{ installer_status.id }}/downloads/credentials?file_name=kubeconfig"
    dest: auth/{{ sno_cluster_name }}-kubeconfig
    force: yes

- name: Get kubeadmin creds
  get_url:
     url: "{{ assisted_service_api }}/api/assisted-install/v2/clusters/{{ installer_status.id }}/credentials"
     headers:
       # Authorization:  "{{ 'Bearer ' + refresh_token }}"
       accept: "application/json"
     dest: auth/{{ sno_cluster_name }}-kubeadmin.json
     force: yes
